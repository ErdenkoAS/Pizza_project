# -*- coding: utf-8 -*-
"""pizza.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wax_sKFuJZ4cSXDi41naEW4SyMcHPf2d
"""

# -*- coding: utf-8 -*-
class Pizza:
    def __init__(self, name: str, icon: str,
                 ingredients: list, size: str = 'L'):
        '''
        —Ä–µ–∞–ª–∏–∑—É–µ–º –∫–ª–∞—Å—Å –ø–∏—Ü—Ü–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å
        –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - –∏–º—è
        - –∏–∫–æ–Ω–∫–∞ (–¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è)
        - –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞—á–∏–Ω–∫–∞ –Ω–∞—à–µ–π –ø–∏—Ü—Ü—ã)
        - —Ä–∞–∑–º–µ—Ä (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ)
        '''
        self.name = name
        self.icon = icon
        self.ingredients = ingredients
        self.size = size

    def dict(self):
        '''
        –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∏–Ω–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        '''

        return {'name': self.name,
                'icon': self.icon,
                'ingredients': self.ingredients,
                'size': self.size}

    def __eq__(self, other):
        '''
        —Ç—É—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        '''
        return (
            self.name == other.name
            and self.ingredients == other.ingredients
            and self.size == other.size
            )


class Margherita(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(
            'Margherita',
            'üßÄ',
            ['tomato sauce', 'mozzarella', 'tomatoes'],
            size
            )


class Pepperoni(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(
            'Pepperoni',
            'üçï',
            ['tomato sauce', 'mozzarella', 'pepperoni'],
            size
            )


class Hawaiian(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(
            'Hawaiian',
            'üçç',
            ['tomato sauce', 'mozzarella', 'chicken', 'pineapples'],
            size
            )


class ChickenBBQ(Pizza):
    def __init__(self, size: str = 'L'):
        super().__init__(
            'Chicken BBQ',
            'üçó',
            ['tomato sauce', 'mozzarella', 'chicken', 'BBQ sauce'],
            size
            )



import click
from time import sleep

@click.group()
def cli():
    pass


@cli.command()
@click.option('--size', default='L', type=click.Choice(['L', 'XL']))
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, size: str, delivery: bool):
    '''
    –ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É
    '''
    pizza_dict = {'margherita': Margherita,
                  'pepperoni': Pepperoni,
                  'hawaiian': Hawaiian,
                  'chickenbbq': ChickenBBQ}
    selected_pizza = pizza_dict[pizza.lower()](size)

    bake(selected_pizza)
    if delivery:
        deliver(selected_pizza)
    else:
        pickup(selected_pizza)


@cli.command()
def menu():
    '''
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é
    '''
    pizzas = [Margherita(), Pepperoni(), Hawaiian(), ChickenBBQ()]
    for pizza in pizzas:
        print(f"{pizza.icon} - {pizza.name}: {', '.join(pizza.ingredients)}")


def log(template: str):
    def decorator(func):
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            print(template.format(result))
            return result

        return wrapper

    return decorator


@log('–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å!')
def bake(pizza: Pizza):
    '''
    –ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É
    '''
    sleep(2)
    return 2


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def deliver(pizza: Pizza):
    '''
    –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É
    '''
    sleep(1)
    return 1


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza: Pizza):
    '''
    –°–∞–º–æ–≤—ã–≤–æ–∑
    '''
    sleep(1)
    return 1


if __name__ == '__main__':
    cli()